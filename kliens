/***************************************/
/*             TCP client              */
/***************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>

#include<time.h>

#include <unistd.h>

#define BUFSIZE 1024
#define PORT_NO 2001
#define error(a,b) fprintf(stderr, a, b)

int main(int argc, char *argv[] ) {// arg count, arg vector   

   /* Declarations */
	int x=0;
	char s[12];
	char z[1000000];
	srand(time(0));
	char p[9];
	int j,k;
	char h[12][13];
	char i=4;
	int close(int);
	int inet_addr(char *);
   int fd;	                       // socket endpt	
   int flags;                      // rcv flags
   struct sockaddr_in server;	     // socket name (addr) of server 
   struct sockaddr_in client;	     // socket name of client 
   int server_size;                // length of the socket addr. server 
   int client_size;                // length of the socket addr. client 
   int bytes;    	                 // length of buffer 
   int rcvsize;                    // received bytes
   int trnmsize;                   // transmitted bytes
   int err;                        // error code
   int ip;												 // ip address
   char on;                        // 
   char buffer[BUFSIZE+1];         // datagram dat buffer area
   char server_addr[16];           // server address	

   /* Initialization */
   on    = 1;
   flags = 0;
   server_size = sizeof server;
   client_size = sizeof client;
   sprintf(server_addr, "%s", argv[1]);
   ip = inet_addr(server_addr);
   server.sin_family      = AF_INET;
   server.sin_addr.s_addr = ip;
   server.sin_port        = htons(PORT_NO);
   
   /* User interface */
  // printf(" Message: ");
  // scanf("%s",buffer);
  // bytes = strlen(buffer)+1;



   /* Creating socket */
   fd = socket(AF_INET, SOCK_STREAM, 0);
   if (fd < 0) {
      error("%s: Socket creation error.\n",argv[0]);
      exit(1);
   }

   /* Setting socket options */
   setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (char *)&on, sizeof on);
   setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (char *)&on, sizeof on);

   /* Connecting to the server */
   err = connect(fd, (struct sockaddr *) &server, server_size);
   if (err < 0) {
      error("%s: Cannot connect to the server.\n", argv[0]);
      exit(2);
   }
system("clear");
printf("Szimbolum azonosito:	 1	 2	 3	 4	 5	 6\n");
printf("Szimbolumok: 		.o.	...	...	.o.	.o.	...\n");
printf("			.oo	.oo	oo.	oo.	.o.	ooo\n");
printf("			...	.o.	.o.	...	.o.	...\n");
send(fd,&i,1,flags);
if(recv( fd, &i, 1, flags ))
{printf("Jatek indul\n");}

for(k=0;k<12;k++){
	if(!(k==0 || k==11)){
	h[0][k]='+';
	h[11][k]='+';}
	else{
	h[0][k]=' ';
	h[11][k]=' ';}	
	}

for(j=1;j<11;j++){
	h[j][0]='+';
	h[j][11]='+';}

for(j=1;j<11;j++){
	for(k=1;k<11;k++){
	h[j][k]='.';}}

j=0;
while(j<6){
p[j]=j+1;
j++;}

for(j=0;j<12;j++){
	for(k=0;k<13;k++){
	if(k!=12){
	printf("%c",h[j][k]);}
	else{
	printf("\n");}}}

while(1){
while(1){
printf("Valasszon szimbolum azonositot:\n");
printf("%d   %d   %d   %d   %d   %d\n",p[0], p[1], p[2], p[3], p[4], p[5]);
scanf("%s",z);
if(strlen(z)==4){
	if(z[0]=='v' && z[1]=='e' && z[2]=='g' && z[3]=='e') x=1; break;}
if(strlen(z)==1){
	if((atoi(&z[0])==p[0] || atoi(&z[0])==p[1] || atoi(&z[0])==p[2] || atoi(&z[0])==p[3] || atoi(&z[0])==p[4] || atoi(&z[0])==p[5]) && (atoi(&z[0])>0 && atoi(&z[0])<7)){
	p[7]=atoi(&z[0]);
	for(j=0;j<6;j++){
		if(p[j]==p[7]){
		p[j]=rand()%6+1;
		break;}}
	break;}}}

if(x==1){}
else{
printf("Adja meg a szimbolum kozepenek:\n");
while(1){
printf("-x koordinatajat:\n");
scanf("%s",z);
if(strlen(z)==4){
	if(z[0]=='v' && z[1]=='e' && z[2]=='g' && z[3]=='e') x=1; break;}
if(strlen(z)==1){
	if(atoi(&z[0])>1 && atoi(&z[0])<10){
	p[8]=atoi(&z[0]);
	break;}}}}

if(x==1){}
else{
while(1){
printf("-y koordinatajat:\n");
scanf("%s",z);
if(strlen(z)==4){
	if(z[0]=='v' && z[1]=='e' && z[2]=='g' && z[3]=='e') x=1; break;}
if(strlen(z)==1){
	if(atoi(&z[0])>1 && atoi(&z[0])<10){
	p[9]=atoi(&z[0]);
	break;}}}}

if(x==1){s[0]=-1; s[1]=-1; s[2]=-1; s[3]=-1; s[4]=-1; s[5]=-1;}
else{
switch(p[7]){
case 1: s[0]=p[9]; s[1]=p[8]; s[2]=p[9]-1; s[3]=p[8]; s[4]=p[9]; s[5]=p[8]+1;
	break;
case 2:	s[0]=p[9]; s[1]=p[8]; s[2]=p[9]+1; s[3]=p[8]; s[4]=p[9]; s[5]=p[8]+1;
	break;
case 3: s[0]=p[9]; s[1]=p[8]; s[2]=p[9]; s[3]=p[8]-1; s[4]=p[9]+1; s[5]=p[8];
	break;
case 4: s[0]=p[9]; s[1]=p[8]; s[2]=p[9]-1; s[3]=p[8]; s[4]=p[9]; s[5]=p[8]-1;
	break;
case 5: s[0]=p[9]; s[1]=p[8]; s[2]=p[9]-1; s[3]=p[8]; s[4]=p[9]+1; s[5]=p[8];
	break;
case 6: s[0]=p[9]; s[1]=p[8]; s[2]=p[9]; s[3]=p[8]-1; s[4]=p[9]; s[5]=p[8]+1;
	break;}}

printf("Varakozas...\n");

send(fd, s, 6, flags);

recv(fd, s, 12, flags);
for(j=0;j<12;j++){printf("%d\n",s[j]);}
if(s[0]==-1 && s[1]==-1 && s[2]==-1 && s[3]==-1 && s[4]==-1 && s[5]==-1 && s[6]==-1 && s[7]==-1 && s[8]==-1 && s[9]==-1 && s[10]==-1 && s[11]==-1){break;}
x=0;

for(j=0;j<12;j=j+2){
if(s[j]!=0 && s[j+1]!=0){
h[s[j]][s[j+1]]='o';}}

system("clear");
for(j=0;j<12;j++){
	if(j==0){
	for(k=0;k<13;k++){
	if(k!=12){
	printf("%c",h[j][k]);}
	else{
	printf("			 1	 2	 3	 4	 5	 6\n");}}
	continue;}
	if(j==1){
	for(k=0;k<13;k++){
	if(k!=12){
	printf("%c",h[j][k]);}
	else{
	printf("			.o.	...	...	.o.	.o.	...\n");}}
	continue;}
	if(j==2){
	for(k=0;k<13;k++){
	if(k!=12){
	printf("%c",h[j][k]);}
	else{
	printf("			.oo	.oo	oo.	oo.	.o.	ooo\n");}}
	continue;}
	if(j==3){
	for(k=0;k<13;k++){
	if(k!=12){
	printf("%c",h[j][k]);}
	else{
	printf("			...	.o.	.o.	...	.o.	...\n");}}
	continue;}
	else{
	for(k=0;k<13;k++){
	if(k!=12){
	printf("%c",h[j][k]);}
	else{
	printf("\n");}}}}
}

	close(fd);
	exit(0);
} 
